const express = require('express');
const app = express();

const { Pool, Client } = require('pg')

// create a new connection pool
const pool = new Pool({
	user: 'marks',
	host: 'localhost',
	password: 'marks',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// exit if there's a problem with a db connection
// this should be more robust in a real application
pool.on('error', (err, client) => {
  console.error('Unexpected error on idle client', err)
  process.exit(-1)
})

app.set('view engine', 'ejs');
app.listen(3000, function() {
    console.log('listening on 3000')
});

app.get('/', (req, res) => {
// render is async so that we can run the connect, query, and release statements synchronously using await
  async function render() {
		const client = await pool.connect();
    console.log("client connected");
		const dbres = await client.query('SELECT name from location')
		console.log("db queried");
    res.render('index.ejs', {locations: dbres.rows});
		console.log("page rendered");
		await client.release();
		console.log("client released");
  }
  render();
});
